<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Ashutosh Singh Rawat</title><link>https://AforAshutosh.github.io/posts/</link><description>Recent content in Posts on Ashutosh Singh Rawat</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 18 Jan 2023 23:18:53 +0530</lastBuildDate><atom:link href="https://AforAshutosh.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Neo Brutalism Will Be Everywhere in 2023</title><link>https://AforAshutosh.github.io/posts/neo-brutalism-will-be-everywhere-in-2023/</link><pubDate>Wed, 18 Jan 2023 23:18:53 +0530</pubDate><guid>https://AforAshutosh.github.io/posts/neo-brutalism-will-be-everywhere-in-2023/</guid><description>&lt;p>Hey there web designers! Are you tired of seeing the same minimalist, clean designs everywhere you look? Well, get ready for a change because I believe that neo-brutalism is going to be everywhere in 2023.&lt;/p>
&lt;p>But wait, you might be thinking, &amp;ldquo;Neo-brutalism? Isn&amp;rsquo;t that the rough, raw, and unrefined architectural style from the 1950s and 60s?&amp;rdquo; And you&amp;rsquo;re right, that is the original definition of brutalism. But in the world of web design, neo-brutalism refers to a style that embraces raw, unpolished elements like bold typography, rough textures, and limited color palettes.&lt;/p>
&lt;p>One of the reasons I believe we&amp;rsquo;ll be seeing more neo-brutalism in 2023 is the rise of nostalgia in design. As we move further into the digital age, there&amp;rsquo;s a growing desire to reconnect with the past and to embrace the tactile and imperfect. Neo-brutalism taps into this nostalgia by harkening back to a time when design was less about perfection and more about raw expression.&lt;/p>
&lt;p>Another reason is the desire for authenticity in design. In a world where everything is curated and filtered, people are craving designs that feel real and genuine. Neo-brutalism embraces this authenticity by embracing the imperfections and embracing the roughness of the design. It&amp;rsquo;s a style that doesn&amp;rsquo;t try to hide its flaws, but instead embraces them as part of its charm.&lt;/p>
&lt;p>But let&amp;rsquo;s not forget about the practical side of things. Neo-brutalism is a style that is easy to replicate and highly customizable. It&amp;rsquo;s a style that can be adapted to a wide range of designs and can be used in a variety of ways, from bold and powerful to simple and understated.&lt;/p>
&lt;p>Now, I know that some of you might be thinking, &amp;ldquo;But what about accessibility? Won&amp;rsquo;t neo-brutalism make it harder for people with disabilities to use my website?&amp;rdquo; And you&amp;rsquo;re right, it&amp;rsquo;s important to consider accessibility in all of our designs. But neo-brutalism doesn&amp;rsquo;t have to be inaccessible. By choosing appropriate color contrasts and typography, and ensuring that all functionality is still operable via keyboard, we can create neo-brutalist designs that are accessible to all users.&lt;/p>
&lt;p>All that being said, I&amp;rsquo;m not saying that every website in 2023 will be neo-brutalist, but I do believe that we&amp;rsquo;ll start to see more and more of it. Neo-brutalism is a style that taps into our nostalgia and desire for authenticity, and it&amp;rsquo;s a style that is easy to replicate and highly customizable. So, let&amp;rsquo;s embrace the imperfections and the raw elements, and see how we can incorporate neo-brutalism into our designs in 2023.&lt;/p></description></item><item><title>Ssr Should Be Default</title><link>https://AforAshutosh.github.io/posts/ssr-should-be-default/</link><pubDate>Wed, 18 Jan 2023 23:08:25 +0530</pubDate><guid>https://AforAshutosh.github.io/posts/ssr-should-be-default/</guid><description>Hey there fellow developers! If you&amp;rsquo;re like me, you&amp;rsquo;re always on the lookout for the latest and greatest technologies and trends in web development. And one trend that I&amp;rsquo;ve been seeing more and more of lately (well, a few years now..) is the use of server-side rendering (SSR) for web applications.
Now, I know that some of you may be thinking, &amp;ldquo;But wait, I&amp;rsquo;ve been using single-page applications (SPAs) for years and they&amp;rsquo;ve worked just fine!</description></item><item><title>Are Single Page applications dead?</title><link>https://AforAshutosh.github.io/posts/are-single-page-applications-dead/</link><pubDate>Wed, 18 Jan 2023 22:59:34 +0530</pubDate><guid>https://AforAshutosh.github.io/posts/are-single-page-applications-dead/</guid><description>&lt;p>Single page applications, or SPAs, have been a popular choice for web development for several years. However, as technology and user needs have evolved, the death of SPAs has been predicted by some in the industry.&lt;/p>
&lt;p>One of the main reasons for this prediction is the rise of mobile devices and the need for faster loading times. SPAs rely on JavaScript to load and render content, which can be slow and clunky on mobile devices with limited processing power. Additionally, Google and other search engines have had difficulty indexing the content on SPAs, making it difficult for users to find them through search.&lt;/p>
&lt;p>Another reason for the decline of SPAs is the emergence of new technologies such as Progressive Web Apps (PWAs) and server-side rendering (SSR). PWAs are web applications that can be installed on a user&amp;rsquo;s device and work offline, providing a similar experience to native mobile apps. SSR allows for the rendering of web pages on the server, reducing the load on the client&amp;rsquo;s device and improving the performance of web pages.&lt;/p>
&lt;p>Additionally, SPAs can also be difficult to maintain and update, since all the code is bundled into one large JavaScript file. This makes it harder to identify and fix bugs, and can also lead to longer development times.&lt;/p>
&lt;p>All that being said, Single Page Applications are not dead. They are still widely used, and they can be useful in certain cases, such as when building a web application that requires a lot of client-side logic or when you need a fast and responsive user interface.&lt;/p>
&lt;p>However, it&amp;rsquo;s also important to keep in mind that SPAs are not the best solution for all use cases. For example, if you&amp;rsquo;re building a content-heavy website, it may be more beneficial to use traditional server-side rendering to improve search engine optimization and reduce the load on the client&amp;rsquo;s device.&lt;/p>
&lt;p>In conclusion, it&amp;rsquo;s important for developers to evaluate the specific needs of their project and choose the appropriate technology for the job. While SPAs have been a popular choice for web development in the past, the rise of new technologies and changing user needs mean that they may not be the best option for every project. It&amp;rsquo;s important to stay aware of the latest developments in web development and to choose the solution that best meets the needs of your project.&lt;/p></description></item></channel></rss>